package pl.piomin.service.blockchain.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.1.
 */
public class System_sol_System extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_ACCEPT = "accept";

    public static final String FUNC_GETRC = "getRC";

    public static final String FUNC_WRITEDATA = "writeData";

    public static final String FUNC_ADDDC = "addDC";

    public static final String FUNC_ADDORDER = "addOrder";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_GETROLE = "getRole";

    public static final String FUNC_CHECKREADER = "checkReader";

    public static final String FUNC_ASSIGNWRITER = "assignWriter";

    public static final String FUNC_GETDC = "getDC";

    public static final String FUNC_ASSIGNREADER = "assignReader";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_READDATA = "readData";

    public static final String FUNC_PICKORDER = "pickOrder";

    public static final String FUNC_CHECKWRITER = "checkWriter";

    public static final String FUNC_ADDRC = "addRC";

    public static final String FUNC_SELL = "sell";

    public static final String FUNC_REFUND = "refund";

    public static final Event USER_EVENT = new Event("user", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ROLE_EVENT = new Event("role", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event DATA_EVENT = new Event("data", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event FROZE_EVENT = new Event("froze", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RELEASE_EVENT = new Event("release", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ORDER_EVENT = new Event("order", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected System_sol_System(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected System_sol_System(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected System_sol_System(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected System_sol_System(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Utf8String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> accept(Utf8String _order) {
        final Function function = new Function(
                FUNC_ACCEPT, 
                Arrays.<Type>asList(_order), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> getRC(Utf8String _rcName) {
        final Function function = new Function(FUNC_GETRC, 
                Arrays.<Type>asList(_rcName), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> writeData(Utf8String _dcName, Utf8String _fileId, Utf8String _hash) {
        final Function function = new Function(
                FUNC_WRITEDATA, 
                Arrays.<Type>asList(_dcName, _fileId, _hash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addDC(Utf8String _dcName, Address _admin) {
        final Function function = new Function(
                FUNC_ADDDC, 
                Arrays.<Type>asList(_dcName, _admin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addOrder(Utf8String _order, Address _sender, Address _receiver, Uint256 _value) {
        final Function function = new Function(
                FUNC_ADDORDER, 
                Arrays.<Type>asList(_order, _sender, _receiver, _value), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint8> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> register(Address _user, Utf8String _roleName) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(_user, _roleName), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Utf8String> getRole(Address _user) {
        final Function function = new Function(FUNC_GETROLE, 
                Arrays.<Type>asList(_user), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> checkReader(Utf8String _dcName, Address _user) {
        final Function function = new Function(FUNC_CHECKREADER, 
                Arrays.<Type>asList(_dcName, _user), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> assignWriter(Utf8String _dcName, Utf8String _roleName) {
        final Function function = new Function(
                FUNC_ASSIGNWRITER, 
                Arrays.<Type>asList(_dcName, _roleName), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> getDC(Utf8String _dcName) {
        final Function function = new Function(FUNC_GETDC, 
                Arrays.<Type>asList(_dcName), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> assignReader(Utf8String _dcName, Utf8String _roleName) {
        final Function function = new Function(
                FUNC_ASSIGNREADER, 
                Arrays.<Type>asList(_dcName, _roleName), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> balanceOf(Address _user) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(_user), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> buy(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Utf8String> readData(Utf8String _dcName, Utf8String _dataId) {
        final Function function = new Function(FUNC_READDATA, 
                Arrays.<Type>asList(_dcName, _dataId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> pickOrder(Utf8String _order) {
        final Function function = new Function(
                FUNC_PICKORDER, 
                Arrays.<Type>asList(_order), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> checkWriter(Utf8String _dcName, Address _user) {
        final Function function = new Function(FUNC_CHECKWRITER, 
                Arrays.<Type>asList(_dcName, _user), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addRC(Utf8String _roleName, Address _admin) {
        final Function function = new Function(
                FUNC_ADDRC, 
                Arrays.<Type>asList(_roleName, _admin), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sell(Uint256 amount) {
        final Function function = new Function(
                FUNC_SELL, 
                Arrays.<Type>asList(amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> refund(Utf8String _order) {
        final Function function = new Function(
                FUNC_REFUND, 
                Arrays.<Type>asList(_order), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<UserEventResponse> getUserEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USER_EVENT, transactionReceipt);
        ArrayList<UserEventResponse> responses = new ArrayList<UserEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserEventResponse typedResponse = new UserEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._user = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse._roleName = (Utf8String) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UserEventResponse> userEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UserEventResponse>() {
            @Override
            public UserEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(USER_EVENT, log);
                UserEventResponse typedResponse = new UserEventResponse();
                typedResponse.log = log;
                typedResponse._user = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse._roleName = (Utf8String) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<UserEventResponse> userEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USER_EVENT));
        return userEventFlowable(filter);
    }

    public List<RoleEventResponse> getRoleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLE_EVENT, transactionReceipt);
        ArrayList<RoleEventResponse> responses = new ArrayList<RoleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleEventResponse typedResponse = new RoleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._roleName = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse._rc = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse._admin = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleEventResponse> roleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RoleEventResponse>() {
            @Override
            public RoleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLE_EVENT, log);
                RoleEventResponse typedResponse = new RoleEventResponse();
                typedResponse.log = log;
                typedResponse._roleName = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse._rc = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse._admin = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleEventResponse> roleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLE_EVENT));
        return roleEventFlowable(filter);
    }

    public List<DataEventResponse> getDataEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DATA_EVENT, transactionReceipt);
        ArrayList<DataEventResponse> responses = new ArrayList<DataEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DataEventResponse typedResponse = new DataEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._dcName = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse._dc = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse._admin = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DataEventResponse> dataEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DataEventResponse>() {
            @Override
            public DataEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DATA_EVENT, log);
                DataEventResponse typedResponse = new DataEventResponse();
                typedResponse.log = log;
                typedResponse._dcName = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse._dc = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse._admin = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DataEventResponse> dataEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DATA_EVENT));
        return dataEventFlowable(filter);
    }

    public List<FrozeEventResponse> getFrozeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FROZE_EVENT, transactionReceipt);
        ArrayList<FrozeEventResponse> responses = new ArrayList<FrozeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FrozeEventResponse typedResponse = new FrozeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse._order = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse._amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FrozeEventResponse> frozeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FrozeEventResponse>() {
            @Override
            public FrozeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FROZE_EVENT, log);
                FrozeEventResponse typedResponse = new FrozeEventResponse();
                typedResponse.log = log;
                typedResponse._from = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse._order = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse._amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<FrozeEventResponse> frozeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FROZE_EVENT));
        return frozeEventFlowable(filter);
    }

    public List<ReleaseEventResponse> getReleaseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RELEASE_EVENT, transactionReceipt);
        ArrayList<ReleaseEventResponse> responses = new ArrayList<ReleaseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReleaseEventResponse typedResponse = new ReleaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse._order = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse._amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse._successful = (Bool) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReleaseEventResponse> releaseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ReleaseEventResponse>() {
            @Override
            public ReleaseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RELEASE_EVENT, log);
                ReleaseEventResponse typedResponse = new ReleaseEventResponse();
                typedResponse.log = log;
                typedResponse._from = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse._order = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse._amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse._successful = (Bool) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Flowable<ReleaseEventResponse> releaseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELEASE_EVENT));
        return releaseEventFlowable(filter);
    }

    public List<OrderEventResponse> getOrderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ORDER_EVENT, transactionReceipt);
        ArrayList<OrderEventResponse> responses = new ArrayList<OrderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OrderEventResponse typedResponse = new OrderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._order = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse._sender = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse._receiver = (Address) eventValues.getNonIndexedValues().get(2);
            typedResponse._value = (Uint256) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderEventResponse> orderEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderEventResponse>() {
            @Override
            public OrderEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ORDER_EVENT, log);
                OrderEventResponse typedResponse = new OrderEventResponse();
                typedResponse.log = log;
                typedResponse._order = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse._sender = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse._receiver = (Address) eventValues.getNonIndexedValues().get(2);
                typedResponse._value = (Uint256) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Flowable<OrderEventResponse> orderEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDER_EVENT));
        return orderEventFlowable(filter);
    }

    @Deprecated
    public static System_sol_System load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new System_sol_System(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static System_sol_System load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new System_sol_System(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static System_sol_System load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new System_sol_System(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static System_sol_System load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new System_sol_System(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<System_sol_System> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(System_sol_System.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<System_sol_System> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(System_sol_System.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<System_sol_System> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(System_sol_System.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<System_sol_System> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(System_sol_System.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class UserEventResponse {
        public Log log;

        public Address _user;

        public Utf8String _roleName;
    }

    public static class RoleEventResponse {
        public Log log;

        public Utf8String _roleName;

        public Address _rc;

        public Address _admin;
    }

    public static class DataEventResponse {
        public Log log;

        public Utf8String _dcName;

        public Address _dc;

        public Address _admin;
    }

    public static class FrozeEventResponse {
        public Log log;

        public Address _from;

        public Utf8String _order;

        public Uint256 _amount;
    }

    public static class ReleaseEventResponse {
        public Log log;

        public Address _from;

        public Utf8String _order;

        public Uint256 _amount;

        public Bool _successful;
    }

    public static class OrderEventResponse {
        public Log log;

        public Utf8String _order;

        public Address _sender;

        public Address _receiver;

        public Uint256 _value;
    }
}
